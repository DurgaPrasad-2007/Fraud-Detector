name: CI/CD Pipeline - Fraud Detection System

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly model retraining

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.1'

jobs:
  code-quality:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      
    - name: Install project
      run: poetry install --no-interaction
      
    - name: Code formatting check
      run: poetry run black --check src/ tests/
      
    - name: Import sorting check
      run: poetry run isort --check-only src/ tests/
      
    - name: Linting
      run: poetry run flake8 src/ tests/
      
    - name: Type checking
      run: poetry run mypy src/
      
    - name: Run tests
      run: poetry run pytest tests/ --cov=src --cov-report=xml --cov-report=html
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        
    - name: Install dependencies
      run: poetry install --no-interaction
      
    - name: Run security scan
      run: poetry run safety check
      
    - name: Run bandit security linter
      run: poetry run bandit -r src/

  model-training:
    name: Model Training & Validation
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        
    - name: Install dependencies
      run: poetry install --no-interaction
      
    - name: Generate synthetic dataset
      run: poetry run python -c "from src.data.preprocessing import get_preprocessor; get_preprocessor().create_synthetic_dataset(10000).to_csv('data/processed/test_dataset.csv', index=False)"
      
    - name: Train models
      run: poetry run python -c "
        from src.data.preprocessing import get_preprocessor
        from src.models.ensemble import get_model
        import pandas as pd
        
        preprocessor = get_preprocessor()
        model = get_model()
        
        df = pd.read_csv('data/processed/test_dataset.csv')
        df_features = preprocessor.engineer_features(df)
        X, y = preprocessor.prepare_training_data(df_features)
        
        results, X_test, y_test = model.train_models(X, y)
        
        # Validate model performance
        for name, result in results.items():
            assert result['auc'] > 0.7, f'{name} model AUC too low: {result[\"auc\"]}'
        
        print('All models passed validation!')
      "
      
    - name: Upload model artifacts
      uses: actions/upload-artifact@v3
      with:
        name: trained-models
        path: data/models/
        retention-days: 30

  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: fraud-detector:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        docker run --rm -d --name fraud-test -p 8000:8000 fraud-detector:latest
        sleep 30
        curl -f http://localhost:8000/health || exit 1
        docker stop fraud-test

  deployment:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [model-training, docker-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # Example: kubectl apply -f k8s/staging/
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add smoke test commands here
        # Example: curl -f https://staging.fraud-detector.com/health

  model-monitoring:
    name: Model Performance Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
        
    - name: Install dependencies
      run: poetry install --no-interaction
      
    - name: Check model performance
      run: |
        poetry run python -c "
        from src.monitoring.metrics import get_metrics_collector
        import json
        
        metrics = get_metrics_collector()
        dashboard_metrics = metrics.get_dashboard_metrics()
        
        # Check if fraud rate is within acceptable range
        fraud_rate = dashboard_metrics['fraud_rate']
        if fraud_rate > 20:  # Alert if fraud rate > 20%
            print(f'ALERT: High fraud rate detected: {fraud_rate}%')
            exit(1)
        else:
            print(f'Model performance OK: Fraud rate {fraud_rate}%')
        "
        
    - name: Notify on performance issues
      if: failure()
      run: |
        echo "Model performance alert triggered!"
        # Add notification logic here (Slack, email, etc.)

